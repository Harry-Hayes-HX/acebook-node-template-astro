name: Build CI and Deploy
on:
  push:
    branches:
      - main  # Replace with the appropriate branch name

jobs:
  build:
    runs-on: ubuntu-latest
    services:
      mongodb:
        image: mongo:latest
        ports:
          - 27017:27017
        options: --name=mongodb
    env:
      MONGODB_URL: mongodb://localhost:27017/acebook_test
    steps:
      - name: Checkout code
        uses: actions/checkout@v2  # Use actions/checkout@v2 instead of v3
      - name: Set up Node.js
        uses: actions/setup-node@v2  # Use actions/setup-node@v2 instead of v3
        with:
          node-version: 18
      - name: Install dependencies
        run: npm ci
      - name: Run lint and unit tests
        run: |
          npm run lint
          npm run test:unit
      - name: Run integration tests
        uses: cypress-io/github-action@v6
        with:
          config-file: cypress.config.js
          start: npm run start:ci

  deploy:
    name: Deploy
    needs: build  # Ensure that the "build" job completes before deploying
    runs-on: ubuntu-latest
    env:
      INSTANCE_IP: ${{ vars.INSTANCE_IP }}
      ASTRONAUT_TOKEN: ${{ secrets.ASTRONAUT_TOKEN }}
      AWS_CLI_TOKEN: ${{ secrets.CI_AWS_ACCESS_TOKEN }}
      AWS_SECRET_TOKEN: ${{ secrets.CI_AWS_SECRET_TOKEN }}
      AWS_INSTANCE_SG_ID: sg-0cb5b1f5db0369db3
    defaults:
      run:
        working-directory: ./
    steps:
      - name: Check out the repository to the runner
        uses: actions/checkout@v3 
      - name: List Repository Contents
        run: ls -R          
      - name: configure aws credentials
        run: |
            echo $AWS_CLI_TOKEN
            echo $AWS_SECRET_TOKEN
        # uses: aws-actions/configure-aws-credentials@v1
        # with:
        #   aws-access-key-id: $AWS_CLI_TOKEN
        #   aws-secret-access-key: $AWS_SECRET_TOKEN
        #   aws-region: eu-west-2
      - name: get runner ip address
        id: ip
        uses: haythem/public-ip@v1.2
      - name: whitelist runner ip address
        run: |
          aws ec2 authorize-security-group-ingress \
            --group-id $AWS_INSTANCE_SG_ID \
            --protocol tcp \
            --port 22 \
            --cidr ${{ steps.ip.outputs.ipv4 }}/32
      - name: Call a Bash Script
        run: |
          chmod +x scripts/deploy-to-instance.sh
          ./scripts/deploy-to-instance.sh
      - name: revoke runner ip address
        run: |
          aws ec2 revoke-security-group-ingress \
            --group-id $AWS_INSTANCE_SG_ID \
            --protocol tcp \
            --port 22 \
            --cidr ${{ steps.ip.outputs.ipv4 }}/32